{"version":3,"file":"resolvers.js","sourceRoot":"/","sources":["graphql/user/resolvers.ts"],"names":[],"mappings":";;;AAAA,qCAAuC;AAEvC,mBAAyB,UAAuB;IAC9C,OAAO;QACL,IAAI,EAAE;YACJ,kBAAkB,EAAE,UAAgB,CAAM,EAAE,IAAS;;oBACnD,OAAO,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACtD,CAAC;aAAA;SACF;QAED,KAAK,EAAE;YACL,IAAI,EAAE,UAAgB,CAAM,EAAE,EAAE,EAAE,OAAY;;oBAC5C,IAAI;wBACF,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;wBAEhC,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;wBAE1D,IAAI,CAAC,IAAI,EAAE;4BACT,MAAM,IAAI,sBAAY,CAAC,gBAAgB,CAAC,CAAC;yBAC1C;wBAED,OAAO,IAAI,CAAC;qBACb;oBAAC,OAAO,CAAC,EAAE;wBACV,MAAM,IAAI,sBAAY,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC;qBAC/D;gBACH,CAAC;aAAA;YACD,WAAW,EAAE;;oBACX,MAAM,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;oBACtD,OAAO,QAAQ,CAAC;gBAClB,CAAC;aAAA;YACD,mBAAmB,EAAE;;oBACnB,MAAM,aAAa,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;oBAC7E,OAAO,aAAa,CAAC;gBACvB,CAAC;aAAA;YAED,cAAc,EAAE,UAAgB,CAAM;;oBACpC,IAAI;wBACF,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;4BAC1D;gCACE,MAAM,EAAE;oCACN,GAAG,EAAE,OAAO;oCACZ,KAAK,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE;iCAC3B;6BACF;yBACF,CAAC,CAAC;wBAEH,OAAO,YAAY,CAAC;qBACrB;oBAAC,OAAO,CAAC,EAAE;wBACV,MAAM,IAAI,sBAAY,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC;qBACtD;gBACH,CAAC;aAAA;YACD,cAAc,EAAE,UAAgB,CAAM;;oBACpC,IAAI;wBACF,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;wBAE/B,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;wBAC1C,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;wBAEjD,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;4BACzD;gCACE,MAAM,EAAE;oCACN,SAAS,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,WAAW,EAAE;iCACpD;6BACF;yBACF,CAAC,CAAC;wBACH,OAAO,WAAW,CAAC;qBACpB;oBAAC,OAAO,CAAC,EAAE;wBACV,MAAM,IAAI,sBAAY,CAAC,yCAAyC,CAAC,CAAC;qBACnE;gBACH,CAAC;aAAA;SACF;QAED,QAAQ,EAAE;YACR,UAAU,EAAE,UAAgB,CAAM,EAAE,IAAS;;oBAC3C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;oBACpG,OAAO,IAAI,CAAC;gBACd,CAAC;aAAA;YAED,UAAU,EAAE,UAAgB,CAAM,EAAE,IAAS;;oBAC3C,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;oBACxF,OAAO,QAAQ,CAAC;gBAClB,CAAC;aAAA;YAED,cAAc,EAAE,UAAgB,CAAM,EAAE,IAAS;;oBAC/C,MAAM,cAAc,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;oBACtG,OAAO,cAAc,CAAC;gBACxB,CAAC;aAAA;YAED,aAAa,EAAE,UAAgB,CAAM,EAAE,IAAS;;oBAC9C,MAAM,aAAa,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBACnG,OAAO,aAAa,CAAC;gBACvB,CAAC;aAAA;YACD,SAAS,EAAE,UAAgB,CAAM,EAAE,IAAS;;oBAC1C,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBAClF,OAAO,IAAI,CAAC;gBACd,CAAC;aAAA;YACD,UAAU,EAAE,UAAgB,CAAM,EAAE,EAAE,EAAE,OAAY;;oBAClD,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC/E,OAAO,GAAG,CAAC;gBACb,CAAC;aAAA;YACD,UAAU,EAAE,UAAe,CAAK,EAAC,IAAQ,EAAE,OAAY;;oBACrD,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;oBACpG,OAAO,IAAI,CAAA;gBACb,CAAC;aAAA;YACD,oBAAoB,EAAE,UAAe,CAAK,EAAC,IAAQ,EAAC,OAAW;;oBAC7D,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,oBAAoB,CACvE,OAAO,CAAC,IAAI,CAAC,GAAG,CACjB,CAAA;oBACD,OAAO,MAAM,CAAA;gBACf,CAAC;aAAA;YACD,iBAAiB,EAAE,UAAgB,CAAM,EAAE,IAAS;;oBAClD,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;oBAC1G,OAAO,KAAK,CAAC;gBACf,CAAC;aAAA;YACD,YAAY,EAAE,UAAgB,CAAM,EAAE,IAAS;;oBAC7C,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,kBAAkB,CAAC,kBAAkB,CACjF,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAC7B,CAAC;oBACF,OAAO,WAAW,CAAC;gBACrB,CAAC;aAAA;SACF;KACF,CAAC;AACJ,CAAC;AAxHD,4BAwHC","sourcesContent":["import { GraphQLError } from 'graphql';\r\nimport { IAppContext } from '../../types/app';\r\nexport default function (appContext: IAppContext) {\r\n  return {\r\n    User: {\r\n      __resolveReference: async function (_: any, args: any) {\r\n        return await appContext.models.User.findById(_._id);\r\n      },\r\n    },\r\n\r\n    Query: {\r\n      user: async function (_: any, {}, context: any) {\r\n        try {\r\n          const userId = context.user._id;\r\n\r\n          const user = await appContext.models.User.findById(userId)\r\n            \r\n          if (!user) {\r\n            throw new GraphQLError('User not found');\r\n          }\r\n\r\n          return user;\r\n        } catch (e) {\r\n          throw new GraphQLError(`Error getting user in graphql: ${e}`);\r\n        }\r\n      },\r\n      getAllUsers: async function () {\r\n        const allUsers = appContext.models.User.find().exec();\r\n        return allUsers;\r\n      },\r\n      getAllVerifiedUsers: async function () {\r\n        const verifiedUsers = appContext.models.User.find({ verified: true }).exec();\r\n        return verifiedUsers;\r\n      },\r\n\r\n      getUsersByType: async function (_: any) {\r\n        try {\r\n          const groupedUsers = await appContext.models.User.aggregate([\r\n            {\r\n              $group: {\r\n                _id: '$type',\r\n                users: { $push: '$$ROOT' },\r\n              },\r\n            },\r\n          ]);\r\n\r\n          return groupedUsers;\r\n        } catch (e) {\r\n          throw new GraphQLError(`Error grouping users: ${e}`);\r\n        }\r\n      },\r\n      getRecentUsers: async function (_: any) {\r\n        try {\r\n          const currentDate = new Date();\r\n\r\n          const oneMonthAgo = new Date(currentDate);\r\n          oneMonthAgo.setMonth(currentDate.getMonth() - 1);\r\n\r\n          const recentUsers = await appContext.models.User.aggregate([\r\n            {\r\n              $match: {\r\n                createdAt: { $gte: oneMonthAgo, $lte: currentDate },\r\n              },\r\n            },\r\n          ]);\r\n          return recentUsers;\r\n        } catch (e) {\r\n          throw new GraphQLError(`Error getting recently registered users`);\r\n        }\r\n      }\r\n    },\r\n\r\n    Mutation: {\r\n      createUser: async function (_: any, args: any) {\r\n        const { user } = await appContext.services.UserService.registerUser(args.CreateUnverifiedUserInput);\r\n        return user;\r\n      },\r\n\r\n      verifyUser: async function (_: any, args: any) {\r\n        const verified = await appContext.services.UserService.verifyUser(args.VerifyUserInput);\r\n        return verified;\r\n      },\r\n\r\n      forgotPassword: async function (_: any, args: any) {\r\n        const forgotPassword = await appContext.services.UserService.forgotPassword(args.ForgotPasswordInput);\r\n        return forgotPassword;\r\n      },\r\n\r\n      resetPassword: async function (_: any, args: any) {\r\n        const resetPassword = await appContext.services.UserService.resetPassword(args.ResetPasswordInput);\r\n        return resetPassword;\r\n      },\r\n      loginUser: async function (_: any, args: any) {\r\n        const user = await appContext.services.UserService.loginUser(args.LoginUserInput);\r\n        return user;\r\n      },\r\n      deleteUser: async function (_: any, {}, context: any) {\r\n        const res = await appContext.services.UserService.deleteUser(context.user._id);\r\n        return res;\r\n      },\r\n      updateUser: async function(_:any,args:any, context: any){\r\n        const user = await appContext.services.UserService.updateUser(args.UpdateUserInput,context.user._id)\r\n        return user\r\n      },\r\n      updateProfilePicture: async function(_:any,args:any,context:any){\r\n        const avatar = await appContext.services.UserService.updateProfilePicture(\r\n          context.user._id\r\n        )\r\n        return avatar\r\n      },\r\n      createUserSession: async function (_: any, args: any) {\r\n        const token = await appContext.services.UserSessionService.createUserSession(args.CreateUserSessionInput);\r\n        return token;\r\n      },\r\n      refreshToken: async function (_: any, args: any) {\r\n        const accessToken = await appContext.services.UserSessionService.refreshAccessToken(\r\n          args.RefreshTokenInput.token\r\n        );\r\n        return accessToken;\r\n      }\r\n    },\r\n  };\r\n}\r\n"]}