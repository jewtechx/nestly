{"version":3,"file":"token.js","sourceRoot":"/","sources":["utils/token.ts"],"names":[],"mappings":";;;;AAAA,wEAA+B;AAI/B,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAA;AAC9C,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAA;AAE5C,SAAgB,OAAO,CAAC,MAAc,EAAE,OAAyB;IAC/D,OAAO,sBAAG,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,kCAC7B,CAAC,OAAO,IAAI,OAAO,CAAC,KACvB,SAAS,EAAE,OAAO,IAClB,CAAC;AACL,CAAC;AALD,0BAKC;AAED,SAAgB,SAAS,CAAI,KAAa;IACxC,IAAI;QACF,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAM,CAAC;QAClD,OAAO,OAAO,CAAC;KAChB;IAAC,OAAO,CAAC,EAAE;QACV,qCAAqC;QACrC,MAAM,CAAC,CAAC;KACT;AACH,CAAC;AARD,8BAQC","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nconst privateKey = process.env.JWT_PRIVATE_KEY\r\nconst publicKey = process.env.JWT_PUBLIC_KEY\r\n\r\nexport function signJwt(object: object, options?: jwt.SignOptions): string {\r\n  return jwt.sign(object, privateKey, {\r\n    ...(options && options),\r\n    algorithm: 'RS256',\r\n  });\r\n}\r\n\r\nexport function verifyJwt<T>(token: string): T {\r\n  try {\r\n    const decoded = jwt.verify(token, publicKey) as T;\r\n    return decoded;\r\n  } catch (e) {\r\n    // Optionally handle or log the error\r\n    throw e;\r\n  }\r\n}\r\n"]}