{"version":3,"file":"token.js","sourceRoot":"/","sources":["utils/token.ts"],"names":[],"mappings":";;;;AAAA,wEAA+B;AAC/B,+DAA+B;AAG/B,MAAM,aAAa,qBAAQ,gBAAM,CAAC,IAAI,CAAE,CAAC;AAEzC,SAAgB,OAAO,CACrB,MAAc,EACd,OAA2D,EAC3D,OAAqC;IAErC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAExF,OAAO,sBAAG,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,kCAC7B,CAAC,OAAO,IAAI,OAAO,CAAC,KACvB,SAAS,EAAE,OAAO,IAClB,CAAC;AACL,CAAC;AAXD,0BAWC;AAED,SAAgB,SAAS,CAAI,KAAa,EAAE,OAAyD;IACnG,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,OAAO,EAAE,CAAC,EAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;IAErF,IAAG;QACD,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAM,CAAC;QAClD,OAAO,OAAO,CAAA;KACf;IAAA,OAAM,CAAC,EAAC;QACP,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;KAC7C;AACH,CAAC;AATD,8BASC;AAAA,CAAC","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport config from '../config';\r\nimport { Types } from 'mongoose';\r\n\r\nconst AccesskeyName = { ...config.auth };\r\n\r\nexport function signJwt(\r\n  object: Object,\r\n  keyName: 'accessTokenPrivateKey' | 'refreshTokenPrivateKey',\r\n  options?: jwt.SignOptions | undefined\r\n) {\r\n  const signingKey = Buffer.from(AccesskeyName[`${keyName}`], 'base64').toString('ascii');\r\n\r\n  return jwt.sign(object, signingKey, {\r\n    ...(options && options),\r\n    algorithm: 'RS256',\r\n  });\r\n}\r\n\r\nexport function verifyJwt<T>(token: string, keyName: 'accessTokenPublicKey' | 'refreshTokenPublicKey'): T | null{\r\n  const publicKey = Buffer.from(AccesskeyName[`${keyName}`],\"base64\").toString(\"ascii\")\r\n\r\n  try{\r\n    const decoded = jwt.verify(token, publicKey) as T;\r\n    return decoded\r\n  }catch(e){\r\n    throw new Error(\"Token verification failed\")\r\n  }\r\n};\r\n"]}