{"version":3,"file":"query.js","sourceRoot":"/","sources":["utils/query.ts"],"names":[],"mappings":";;;AAAO,MAAM,aAAa,GAAG,CAAC,OAAa,EAAE,IAAU,EAAE,UAAgB,EAAE,MAAY,EAAE,EAAE;IACzF,MAAM,KAAK,GAAG,EAAE,CAAC;IAEjB,IAAI,OAAO,EAAE;QACX,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;YACzB,IAAI,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC/B,6EAA6E;gBAC7E,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC9E,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9C,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;oBAErC,sDAAsD;oBACtD,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC;iBAC1C;qBAAM;oBACL,4EAA4E;oBAC5E,KAAK,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;iBAC3B;aACF;SACF;KACF;IAED,SAAS;IACT,IAAI,MAAM,EAAE;QACV,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC5C,KAAK,CAAC,KAAK,CAAC,GAAG;YACb,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE;YACjC,EAAE,WAAW,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE;YACxC,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE;SACtC,CAAC;KACH;IAED,OAAO;IACP,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,IAAI,IAAI,EAAE;QACR,YAAY,GAAG,IAAI,CAAC;KACrB;IAED,8BAA8B;IAC9B,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC;IACnC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAE;IACrB,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC;IAErB,OAAO;QACL,KAAK,EAAC,YAAY,EAAC,KAAK,EAAC,MAAM;KAChC,CAAA;AACH,CAAC,CAAC;AA7CW,QAAA,aAAa,iBA6CxB","sourcesContent":["export const generateQuery = (filters?: any, sort?: any, pagination?: any, search?: any) => {\r\n  const query = {};\r\n\r\n  if (filters) {\r\n    for (const key in filters) {\r\n      if (filters.hasOwnProperty(key)) {\r\n        // Checking if the value of the field is an object with a comparison operator\r\n        if (typeof filters[key] === 'object' && Object.keys(filters[key]).length === 1) {\r\n          const operator = Object.keys(filters[key])[0];\r\n          const value = filters[key][operator];\r\n\r\n          // Constructing the MongoDB query operator dynamically\r\n          query[key] = { [`$${operator}`]: value };\r\n        } else {\r\n          // If no comparison operator is provided, treat it as an equality comparison\r\n          query[key] = filters[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // search\r\n  if (search) {\r\n    const searchRegex = new RegExp(search, 'i');\r\n    query['$or'] = [\r\n      { name: { $regex: searchRegex } },\r\n      { description: { $regex: searchRegex } },\r\n      { location: { $regex: searchRegex } },\r\n    ];\r\n  }\r\n\r\n  // sort\r\n  let sortCriteria = {};\r\n  if (sort) {\r\n    sortCriteria = sort;\r\n  }\r\n\r\n  //apply pagination if provided\r\n  let { limit, offset } = pagination;\r\n  limit = limit || 10 ;\r\n  offset = offset || 0;\r\n\r\n  return {\r\n    query,sortCriteria,limit,offset,\r\n  }\r\n};\r\n\r\n"]}