{"version":3,"file":"session.js","sourceRoot":"/","sources":["services/session.ts"],"names":[],"mappings":";;;AAAA,0CAA2C;AAC3C,8CAAsF;AAEtF,+DAAqD;AAErD,MAAqB,kBAAmB,SAAQ,aAAQ;IACpD,YAAY,KAAiB;QACzB,KAAK,CAAC,KAAK,CAAC,CAAA;IAChB,CAAC;IACC,wBAAwB;IACtB,iBAAiB,CAAC,KAAS;;YAC/B,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;YAExB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YAEvD,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;aAC9C;YAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC7C;YAED,MAAM,WAAW,GAAG,IAAA,yBAAe,EAAC,IAAI,CAAC,CAAC;YAE1C,MAAM,YAAY,GAAG,MAAM,IAAA,0BAAgB,EAAC,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YAElE,OAAO;gBACL,WAAW;gBACX,YAAY;aACb,CAAC;QACJ,CAAC;KAAA;IAED,0BAA0B;IACpB,kBAAkB,CAAC,YAAoB;;YAC3C,MAAM,OAAO,GAAG,MAAM,IAAA,iBAAS,EAAsB,YAAY,CAAC,CAAC;YAEnE,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,OAAO,GAAG,MAAM,IAAA,yBAAe,EAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAEvD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAErE,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,WAAW,GAAG,IAAA,yBAAe,EAAC,IAAI,CAAC,CAAC;YAE1C,OAAO,EAAE,WAAW,EAAE,CAAC;QACzB,CAAC;KAAA;CAEF;AArDD,qCAqDC","sourcesContent":["import { verifyJwt } from '../utils/token';\r\nimport { findSessionById, signAccessToken, signRefreshToken } from '../utils/session';\r\n\r\nimport IService, { IAppContext } from \"../types/app\";\r\n\r\nexport default class UserSessionService extends IService{\r\n    constructor(props:IAppContext){\r\n        super(props)\r\n    }\r\n      // creates access tokens\r\n  async createUserSession(input:any) {\r\n    const { email } = input;\r\n\r\n    const user = await this.models.User.findOne({ email });\r\n    \r\n    if (!user) {\r\n      throw new Error('Invalid email or password');\r\n    }\r\n    \r\n    if (!user.verified) {\r\n      throw new Error('Please verify your email');\r\n    }\r\n    \r\n    const accessToken = signAccessToken(user);\r\n\r\n    const refreshToken = await signRefreshToken({ userId: user._id });\r\n\r\n    return {\r\n      accessToken,\r\n      refreshToken,\r\n    };\r\n  }\r\n\r\n  // refreshes access tokens\r\n  async refreshAccessToken(refreshToken: string) {\r\n    const decoded = await verifyJwt<{ session: string }>(refreshToken);\r\n\r\n    if (!decoded) {\r\n      throw new Error('Could not refresh access token');\r\n    }\r\n\r\n    const session = await findSessionById(decoded.session);\r\n\r\n    if (!session || !session.valid) {\r\n      throw new Error('Could not refresh access token');\r\n    }\r\n\r\n    const user = await this.models.User.findById(String(session.userId));\r\n\r\n    if (!user) {\r\n      throw new Error('Could not refresh access token');\r\n    }\r\n\r\n    const accessToken = signAccessToken(user);\r\n\r\n    return { accessToken };\r\n  }\r\n\r\n}"]}