{"version":3,"file":"payment.js","sourceRoot":"/","sources":["services/payment.ts"],"names":[],"mappings":"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","sourcesContent":["import config from \"../config\";\r\nimport IService, { IAppContext } from \"../types/app\";\r\nimport axios from \"axios\";\r\n\r\nexport default class PaymentService extends IService{\r\n    private endpoint = 'https://api.paystack.co'\r\n\r\n    constructor(props:IAppContext){\r\n        super(props)\r\n    }\r\n\r\n    async initiateTransaction(InitiateTransactionInput:any, userId:any): Promise<any> {\r\n        const user = await this.authenticate_user(userId);\r\n    \r\n        const { email } = InitiateTransactionInput;\r\n    \r\n        if (user.email !== email) {\r\n            throw new Error('Wrong user');\r\n        }   \r\n    \r\n        try {\r\n            const response = await axios({\r\n                method: 'post',\r\n                url: `${this.endpoint}/transaction/initialize`,\r\n                headers: {\r\n                    'Authorization': `Bearer ${config.paystack.secret_key}`\r\n                },\r\n                data: InitiateTransactionInput\r\n            });\r\n            \r\n            return response.data;\r\n        } catch (e) {\r\n            throw new Error(`Failed to initialize transaction: ${e}`);\r\n        }\r\n    }\r\n\r\n    async verifyTransaction(Reference:String,userId:any){\r\n        await this.authenticate_user(userId)\r\n        \r\n        try{\r\n            const response = await axios({\r\n                method:'get',\r\n                url:`${this.endpoint}/transaction/verify/${Reference}`,\r\n                headers:{\r\n                    'Authorization': `Bearer ${config.paystack.secret_key}`\r\n                }\r\n            })\r\n\r\n            const bookingId = response.data.data.metadata.bookingId\r\n            const transactionId = response.data.data.id\r\n            const reference = response.data.data.reference\r\n            const status = response.data.status\r\n            const main_status = response.data.data.status\r\n            const amount = response.data.data.amount\r\n            const startDate = response.data.data.paid_at\r\n\r\n            const booking = await this.authenticate_booking(bookingId)\r\n\r\n            if(status && main_status && booking){\r\n                await booking.updateOne({\r\n                    $set : {\r\n                        status:\"CONFIRMED\",\r\n                        transactionId,\r\n                        reference,\r\n                        amount,\r\n                        startDate,\r\n                    }\r\n                })\r\n                \r\n            }else if(!status && !main_status){\r\n                await booking.updateOne({\r\n                    $set : {\r\n                        status:\"REJECTED\"\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            await booking.save()\r\n\r\n            const {data} = response\r\n        return {data,booking}\r\n        }catch(e){\r\n            throw new Error(`Failed to verify transaction: ${e}`)\r\n        }\r\n    }\r\n\r\n    async makePaymentToOwner(bookingId:any,userId:any){\r\n        await this.authenticate_user(userId)\r\n        const booking = await this.authenticate_booking(bookingId)\r\n\r\n        const {apartment} = booking\r\n\r\n        const _apartment = await this.authenticate_apartment(apartment)\r\n\r\n        const {owner} = _apartment\r\n\r\n        const _owner = await this.models.User.findById(owner)\r\n\r\n        if(!_owner){\r\n            throw new Error('Owner not found')\r\n        }\r\n\r\n        // making owner a transfer recipient to recieve payments\r\n        \r\n        try{\r\n            const {profile,ownerPayment} = _owner\r\n            \r\n        const response = await axios({\r\n            method:'post',\r\n            url:`${this.endpoint}/transferrecipient`,\r\n            headers:{\r\n                'Authorization': `Bearer ${config.paystack.secret_key}`,\r\n                'Content-Type':'application/json'\r\n            },\r\n            data:{\r\n                \"type\":\"ghipss\",\r\n                \"name\":`${profile.firstname} ${profile.lastname}`,\r\n                \"account_number\":`${ownerPayment.accountNumber}`,\r\n                \"bank_code\":`${ownerPayment.bankCode}`,\r\n                \"currency\":\"GHS\"\r\n            }\r\n        })\r\n        \r\n        //making transfer\r\n        const recipient_code = response.data.data.recipient_code\r\n        const {amount} = booking\r\n        const data = {\r\n            \"source\":\"balance\",\r\n            \"reason\":\"recieving payment for apartment\",\r\n            \"amount\": ((95/100) * Number(amount)),\r\n            \"recipient\":recipient_code\r\n        }\r\n\r\n        const _response = await axios({\r\n            method:'post',\r\n            url:`${this.endpoint}/transfer`,\r\n            headers:{\r\n                'Authorization': `Bearer ${config.paystack.secret_key}`,\r\n                'Content-Type':'application/json'\r\n            },\r\n            data : data\r\n        })\r\n\r\n       return _response.data\r\n        }catch(e){\r\n            throw new Error(`Error paying owner of apartment: ${e}`)\r\n        }\r\n    }\r\n}    "]}