{"version":3,"file":"user.js","sourceRoot":"/","sources":["services/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 } from 'uuid';\r\nimport IService, { IAppContext } from '../types/app';\r\nimport { IUserAuth, IUserInput, IUserResetPasswordInput, IUserVerificationInput } from '../types/user/user';\r\nimport sendEmail from '../utils/mailer';\r\nimport log from '../utils/log';\r\n\r\nexport default class UserService extends IService {\r\n  constructor(context: IAppContext) {\r\n    super(context);\r\n  }\r\n\r\n  // registers user\r\n  async registerUser(CreateUnverifiedUserInput: IUserInput): Promise<IUserAuth> {\r\n    try {\r\n      const _user = await this.models.User.findOne({ email: CreateUnverifiedUserInput.email });\r\n      if (_user) throw new Error('User already exists');\r\n\r\n      const user = new this.models.User({ ...CreateUnverifiedUserInput });\r\n      await user.save();\r\n\r\n      await sendEmail({\r\n        from: 'jwlarbi15@gmail.com',\r\n        to: user.email,\r\n        subject: 'Please verify your account',\r\n        text: `Verification code : ${user.verificationCode}. Id : ${user._id}`,\r\n      });\r\n\r\n      return {\r\n        user,\r\n      };\r\n    } catch (e) {\r\n      throw new Error('Error creating new user');\r\n    }\r\n  }\r\n\r\n  //verifies user\r\n  async verifyUser(VerifyUserInput: IUserVerificationInput): Promise<boolean> {\r\n    const { id, verificationCode } = VerifyUserInput;\r\n    try {\r\n      // Find the user by Id\r\n      const user = await this.authenticate_user(id)\r\n\r\n      // Check if the user is already verified\r\n      if (user.verified) {\r\n        throw new Error('User is already verified');\r\n      }\r\n\r\n      // Check if verificationCode matches\r\n      if (user.verificationCode !== verificationCode) {\r\n        throw new Error('Invalid verification code');\r\n      }\r\n\r\n      // Set verified to true and save user\r\n      user.verified = true;\r\n      await user.save();\r\n\r\n      return true;\r\n    } catch (e) {\r\n      throw new Error(`Error validating user: ${e}`);\r\n    }\r\n  }\r\n\r\n  // sends verification code to user's email\r\n  async forgotPassword(ForgotPasswordInput: { email: string }) {\r\n    const { email } = ForgotPasswordInput;\r\n\r\n    const user = await this.models.User.findOne({ email });\r\n\r\n    if (!user) {\r\n      throw new Error('user not found');\r\n    }\r\n\r\n    if (!user.verified) {\r\n      throw new Error('user is not verified');\r\n    }\r\n\r\n    const passwordResetCode = v4();\r\n\r\n    user.passwordResetCode = passwordResetCode;\r\n\r\n    await user.save();\r\n\r\n    await sendEmail({\r\n      to: user.email,\r\n      from: 'test@example.com',\r\n      subject: 'Reset your password',\r\n      text: `Password reset code: ${passwordResetCode}. Id: ${user._id}`,\r\n    });\r\n\r\n    log.debug(`Password reset code sent to ${user.email}`);\r\n\r\n    const message = 'password reset code sent';\r\n    return message;\r\n  }\r\n\r\n  // resets user's password to new password from email\r\n  async resetPassword(ResetPasswordInput: IUserResetPasswordInput) {\r\n    const { id, passwordResetCode, newPassword } = ResetPasswordInput;\r\n\r\n    const user = await this.authenticate_user(id)\r\n\r\n    if (!user || user.passwordResetCode !== passwordResetCode) {\r\n      throw new Error('Could not reset password');\r\n    }\r\n\r\n    user.passwordResetCode = null;\r\n\r\n    user.password = newPassword;\r\n\r\n    await user.save();  \r\n\r\n    const message = 'Successfully updated password';\r\n    return message;\r\n  }\r\n\r\n  // login user\r\n  async loginUser(LoginUserInput: any) {\r\n    const { email, password } = LoginUserInput;\r\n\r\n    const user = await this.models.User.findOne({ email });\r\n    if (!user) {\r\n      throw new Error('user not found');\r\n    }\r\n\r\n    try {\r\n      const valid = await user.validatePassword(password);\r\n      if (!valid) {\r\n        throw new Error('password incorrect');\r\n      }\r\n    } catch (e) {\r\n      throw new Error(e);\r\n    }\r\n\r\n    return user;\r\n  }\r\n\r\n  // updates user details\r\n  async updateUser(UpdateUserInput: any, userId: any) {\r\n    try {\r\n      const user = await this.authenticate_user(userId)\r\n  \r\n      if ('rating' in UpdateUserInput) {\r\n        user.rating = UpdateUserInput.rating;\r\n      } else {\r\n        if (user._id.toString() !== userId.toString()) {\r\n          throw new Error(`Unauthorized: Cannot update another user's details`);\r\n        }\r\n  \r\n        for (const key in UpdateUserInput) {\r\n          if (key !== 'rating') {\r\n            user[key] = UpdateUserInput[key];\r\n          }\r\n        }\r\n      }\r\n  \r\n      await user.save();\r\n  \r\n      return user;\r\n    } catch (e) {\r\n      throw new Error(`Error updating user: ${e.message}`);\r\n    }\r\n  }\r\n  \r\n  //update profile picture\r\n  async updateProfilePicture(userId:any){\r\n    const user = await this.authenticate_user(userId)\r\n\r\n    // avatar is from standalone file upload server\r\n    const avatars = await this.models.Image.find({useId:user._id})\r\n\r\n    if(!avatars){\r\n      throw new Error(`No avatar found for this user`)\r\n    }\r\n\r\n    const avatar = [...avatars].reverse()\r\n    console.log(avatar)\r\n    const {path} = avatar[0]\r\n\r\n    await user.updateOne({\r\n      $set : {\r\n        profile : {avatar:path}\r\n      }\r\n    },{new:true,upsert:true})\r\n\r\n    await user.save()\r\n\r\n    return avatar[0]\r\n  }\r\n\r\n  // deletes user account\r\n  async deleteUser(id: any) {\r\n    const user = await this.authenticate_user(id)\r\n\r\n    try {\r\n      await this.models.User.findByIdAndDelete(id);\r\n      return `Deleted user successfully`;\r\n    } catch (e) {\r\n      throw new Error(`Error deleting user`);\r\n    }\r\n  }\r\n\r\n  // getting user rating\r\n  async getUserRating(userId: any) {\r\n    try {\r\n      const user = await this.models.User.findOne({_id:userId});\r\n\r\n      if (user.rating.length === 0) {\r\n        return {\r\n          averageRating: 0,\r\n          totalRatings: 0,\r\n        };\r\n      }\r\n\r\n      const totalScore = user.rating.reduce((sum: any, rating: any) => sum + rating.score, 0);\r\n      const averageRating = totalScore / user.rating.length;\r\n\r\n      return {\r\n        averageRating,\r\n        totalRatings: user.rating.length,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching ratings for user:', error);\r\n      throw new Error('Failed to fetch ratings');\r\n    }\r\n  }\r\n}\r\n"]}