{"version":3,"file":"apartment.js","sourceRoot":"/","sources":["services/apartment.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from 'mongoose';\r\nimport { IApartment } from '../types/apartment';\r\nimport IService, { IAppContext } from '../types/app';\r\nimport { generateQuery } from '../utils/query';\r\n\r\nexport default class ApartmentService extends IService {\r\n  constructor(props: IAppContext) {\r\n    super(props);\r\n  }\r\n  async getAllApartments(GetAllApartmentsInput: any) {\r\n    const { filters, sort, pagination, search } = GetAllApartmentsInput;\r\n\r\n    const { query, sortCriteria, limit, offset } = generateQuery(filters, sort, pagination, search);\r\n\r\n    const apartments = await this.models.Apartment.find(query).sort(sortCriteria).skip(offset).limit(limit);\r\n\r\n    return apartments;\r\n  }\r\n\r\n  async getAllOwnerApartments(userId: any) {\r\n    try {\r\n      const apartments = await this.models.Apartment.find({ owner: userId }).exec();\r\n      return apartments;\r\n    } catch (e) {\r\n      throw new Error(`Error getting owner apartments: ${e} `);\r\n    }\r\n  }\r\n\r\n  async createApartment(CreateApartmentInput: IApartment, userId: any, imageUrls?: any) {\r\n    try {\r\n      const user = await this.authenticate_user(userId);\r\n      \r\n      if (user.type !== 'OWNER' && !CreateApartmentInput['reviews']) {\r\n        throw new Error(`Renters cannot create apartments`);\r\n      }\r\n      const apartment = await this.models.Apartment.create({ owner: userId, ...CreateApartmentInput });\r\n      return apartment;\r\n    } catch (e) {\r\n      throw new Error(`Error creating apartment`);\r\n    }\r\n  }\r\n\r\n  async uploadImages(useId:any,userId:any){\r\n    try {\r\n\r\n    await this.authenticate_user(userId);\r\n    const apartment = await this.authenticate_apartment(useId)\r\n\r\n    // Images are from a standalone file upload engine\r\n    const apartmentImages = await this.models.Image.find({useId}).limit(5)\r\n\r\n    const images = [...apartmentImages].reverse()\r\n\r\n    \r\n    if(images){\r\n      await apartment.updateOne({\r\n        $set : {images}\r\n      },{new:true,upsert:true})\r\n      await apartment.save()\r\n      \r\n      return 'images uploaded successfully'\r\n    }\r\n    }catch(e){\r\n      throw new Error(`Error uploading images: ${e}`)\r\n    }\r\n  \r\n  }\r\n\r\n\r\n  async updateApartment(UpdateApartmentInput: any, userId: any) {\r\n    try {\r\n      const user = await this.authenticate_user(userId);\r\n\r\n      if (user.type !== 'OWNER') {\r\n        throw new Error(`Cannot edit this apartment`);\r\n      }\r\n\r\n      const apartment = await this.models.Apartment.findOneAndUpdate(\r\n        { owner: userId },\r\n        { $set: { owner: userId, ...UpdateApartmentInput } }\r\n      );\r\n\r\n      return apartment;\r\n    } catch (e) {\r\n      throw new Error(`Error updating apartment: ${e}`);\r\n    }\r\n  }\r\n\r\n  async deleteApartment(DeleteApartmentInput: { id: Types.ObjectId }, userId: any) {\r\n    try {\r\n      const { id } = DeleteApartmentInput;\r\n\r\n      const apartment = await this.authenticate_apartment(id)\r\n\r\n      const owner = apartment.owner.toString();\r\n      if (userId !== owner) {\r\n        throw new Error(`Apartment doesn't belong to user`);\r\n      }\r\n\r\n      await apartment.deleteOne();\r\n\r\n      return 'Apartment deleted successfully';\r\n    } catch (e) {\r\n      throw new Error(`Error deleting apartment: ${e}`);\r\n    }\r\n  }\r\n}\r\n"]}