{"version":3,"file":"user.js","sourceRoot":"/","sources":["models/user/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { Schema, model, CallbackError } from 'mongoose';\r\nimport { IUserDocument } from '../../types/user/user';\r\nimport { v4 } from 'uuid';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport const privateField = ['password', '__v', 'verificationCode', 'passwordResetCode', 'verified'];\r\n\r\nconst userSchema = new Schema<IUserDocument>(\r\n  {\r\n    username: { type: String, required: true },\r\n    email: { type: String, required: true },\r\n    password: { type: String, required: true },\r\n    type: { type: String, enum: ['OWNER','RENTER'], required: true },\r\n    verificationCode: { type: String, required: true, default: () => v4() },\r\n    passwordResetCode: { type: String },\r\n    verified: { type: Boolean, required: true, default: false },\r\n    profile: {\r\n      avatar: {type:String},\r\n      firstname: { type: String },\r\n      lastname: { type: String },\r\n      phoneNumber: { type: String },\r\n      address: { type: String },\r\n    },\r\n    rating: [{\r\n      ratedBy: { type: Schema.Types.ObjectId }, // User who is giving the rating\r\n      criteria: { type: String }, // Criteria for the rating (e.g., professionalism, communication)\r\n      score: { type: Number, required: true, min: 1, max: 5 }, // Rating score (1 to 5)\r\n      comment: { type: String }, // Optional comment\r\n    }],\r\n    settings: {\r\n      // General Settings\r\n      language: { type: String, enum: ['EN', 'FR', 'ES', 'DE', 'ZH', 'JA', 'KO'], default: 'EN' },\r\n      theme: { type: String, enum: ['LIGHT', 'DARK'], default: 'LIGHT' },\r\n      notificationEnabled: { type: Boolean, default: true },\r\n      soundEnabled: { type: Boolean, default: true },\r\n      autoSaveInterval: { type: Number, default: 10 },\r\n\r\n      // Privacy Settings\r\n      profileVisibility: { type: String, enum: ['PUBLIC', 'PRIVATE'], default: 'PUBLIC' },\r\n      contactInfoVisibility: { type: String, enum: ['PUBLIC', 'PRIVATE'], default: 'PUBLIC' },\r\n      locationSharingEnabled: { type: Boolean, default: true },\r\n      activityTrackingEnabled: { type: Boolean, default: true },\r\n      dataSharingEnabled: { type: Boolean, default: true },\r\n      dataRetentionPeriod: { type: Number, default: 365 },\r\n\r\n      // Security Settings\r\n      twoFactorAuthEnabled: { type: Boolean, default: false },\r\n      dataEncryptionEnabled: { type: Boolean, default: false },\r\n    },\r\n    ownerPayment: {\r\n      accountNumber : {type:String},\r\n      bankCode: {type:String}\r\n    }\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nuserSchema.pre('save', async function (next) {\r\n  if (!this.isModified('password')) return next();\r\n  try {\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hash = await bcrypt.hash(this.password, salt);\r\n    this.password = hash;\r\n    next();\r\n  } catch (err) {\r\n    next(err as CallbackError);\r\n  }\r\n});\r\n\r\nuserSchema.methods.validatePassword = async function (pass: string) {\r\n  return bcrypt.compare(pass, this.password);\r\n};\r\n\r\nconst User = model('User', userSchema);\r\n\r\nexport default User;\r\n"]}