{"version":3,"file":"token.js","sourceRoot":"/","sources":["utils/token.ts"],"names":[],"mappings":";;;;AACA,wEAA+B;AAC/B,+DAA+B;AAC/B,qCAAuC;AACvC,4DAA4B;AAE5B,gBAAM,CAAC,MAAM,EAAE,CAAC;AAET,MAAM,cAAc,GAAG,CAAC,EAAiB,EAAE,EAAE;IAClD,IAAI;QACF,MAAM,KAAK,GAAG,sBAAG,CAAC,IAAI,CAAC,EAAE,EAAE,EAAC,EAAE,gBAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YAChD,SAAS,EAAE,gBAAM,CAAC,IAAI,CAAC,YAAY;SACpC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;KACd;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,CAAC;KACT;AACH,CAAC,CAAC;AATW,QAAA,cAAc,kBASzB;AACK,MAAM,iBAAiB,GAAG,CAAC,KAAa,EAAE,EAAE;IACjD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IAClB,IAAI;QACF,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,sBAAY,CAAC,UAAU,EAAE;gBACjC,UAAU,EAAE;oBACV,IAAI,EAAE,4BAA4B;iBACnC;aACF,CAAC,CAAC;SACJ;QAED,IAAI,OAAO,CAAC;QACZ,sBAAG,CAAC,MAAM,CACR,KAAK,EACL,OAAO,CAAC,GAAG,CAAC,UAAU,EACtB,UAAU,GAAQ,EAAE,SAAc;YAChC,IAAI,GAAG,EAAE;gBACP,MAAM,IAAI,sBAAY,CAAC,GAAG,CAAC,OAAO,EAAE;oBAClC,UAAU,EAAE;wBACV,IAAI,EAAE,mCAAmC;qBAC1C;iBACF,CAAC,CAAC;aACJ;YACD,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC,CACF,CAAC;QAEF,OAAO,OAAO,CAAC;KAChB;IAAC,OAAO,GAAO,EAAE;QAChB,MAAM,IAAI,sBAAY,CAAC,GAAG,CAAC,OAAO,EAAE;YAClC,UAAU,EAAE;gBACV,IAAI,EAAE,iBAAiB;aACxB;SACF,CAAC,CAAC;KACJ;AACH,CAAC,CAAC;AAnCW,QAAA,iBAAiB,qBAmC5B","sourcesContent":["    \r\nimport jwt from \"jsonwebtoken\";\r\nimport config from \"../config\";\r\nimport { GraphQLError } from \"graphql\";\r\nimport dotenv from \"dotenv\";\r\nimport { Types } from \"mongoose\";\r\ndotenv.config();\r\n\r\nexport const _generateToken = (id:Types.ObjectId) => {\r\n  try {\r\n    const token = jwt.sign({ id}, config.auth.secret, {\r\n      expiresIn: config.auth.token_expiry,\r\n    });\r\n    return token;\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n};\r\nexport const verifyAccessToken = (token: string) => {\r\n  console.log(token)\r\n  try {\r\n    if (!token) {\r\n      throw new GraphQLError(\"No token\", {\r\n        extensions: {\r\n          code: \"UNAUTHENTICATED - NO TOKEN\",\r\n        },\r\n      });\r\n    }\r\n\r\n    let decoded;\r\n    jwt.verify(\r\n      token,\r\n      process.env.JWT_SECRET,\r\n      function (err: any, tokenData: any) {\r\n        if (err) {\r\n          throw new GraphQLError(err.message, {\r\n            extensions: {\r\n              code: \"UNAUTHENTICATED - TOKEN MALFORMED\",\r\n            },\r\n          });\r\n        }\r\n        decoded = tokenData;\r\n      }\r\n    );\r\n\r\n    return decoded;\r\n  } catch (err:any) {\r\n    throw new GraphQLError(err.message, {\r\n      extensions: {\r\n        code: \"UNAUTHENTICATED\",\r\n      },\r\n    });\r\n  }\r\n};"]}