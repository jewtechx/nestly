{"version":3,"file":"session.js","sourceRoot":"/","sources":["services/user/session.ts"],"names":[],"mappings":";;;AACA,kEAAwD;AAExD,iDAAyF;AACzF,mCAA6B;AAC7B,6CAA8C;AAE9C,MAAqB,kBAAmB,SAAQ,aAAQ;IACtD,YAAY,KAAkB;QAC5B,KAAK,CAAC,KAAK,CAAC,CAAC;IACf,CAAC;IAEK,iBAAiB,CAAC,KAAiB;;YACvC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;YAElC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YAEvD,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;aAC9C;YAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC7C;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAEtD,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;aAC9C;YAED,MAAM,WAAW,GAAG,IAAA,yBAAe,EAAC,IAAI,CAAC,CAAC;YAE1C,MAAM,YAAY,GAAG,MAAM,IAAA,0BAAgB,EAAC,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YAElE,OAAO;gBACL,WAAW;gBACX,YAAY;aACb,CAAC;QACJ,CAAC;KAAA;IAEK,kBAAkB,CAAC,GAAY,EAAC,GAAY;;YAChD,MAAM,YAAY,GAAG,IAAA,YAAG,EAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;YAEnD,MAAM,OAAO,GAAG,IAAA,iBAAS,EAAsB,YAAY,EAAE,uBAAuB,CAAC,CAAC;YAEtF,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YACD,MAAM,OAAO,GAAG,MAAM,IAAA,yBAAe,EAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAEvD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAE7D,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;aAC/D;YAED,MAAM,WAAW,GAAG,IAAA,yBAAe,EAAC,IAAI,CAAC,CAAC;YAE1C,OAAO,EAAE,WAAW,EAAE,CAAC;QACzB,CAAC;KAAA;CACF;AA1DD,qCA0DC","sourcesContent":["import { Request, Response } from 'express';\r\nimport IService, { IAppContext } from '../../types/app';\r\nimport { IUserInput } from '../../types/user/user';\r\nimport { findSessionById, signAccessToken, signRefreshToken } from '../../utils/session';\r\nimport { get } from 'lodash';\r\nimport { verifyJwt } from '../../utils/token';\r\n\r\nexport default class UserSessionService extends IService {\r\n  constructor(props: IAppContext) {\r\n    super(props);\r\n  }\r\n\r\n  async createUserSession(input: IUserInput) {\r\n    const { email, password } = input;\r\n\r\n    const user = await this.models.User.findOne({ email });\r\n\r\n    if (!user) {\r\n      throw new Error('Invalid email or password');\r\n    }\r\n\r\n    if (!user.verified) {\r\n      throw new Error('Please verify your email');\r\n    }\r\n\r\n    const isValid = await user.validatePassword(password);\r\n\r\n    if (!isValid) {\r\n      throw new Error('Invalid email or password');\r\n    }\r\n\r\n    const accessToken = signAccessToken(user);\r\n\r\n    const refreshToken = await signRefreshToken({ userId: user._id });\r\n\r\n    return {\r\n      accessToken,\r\n      refreshToken,\r\n    };\r\n  }\r\n\r\n  async refreshAccessToken(req: Request,res:Response) {\r\n    const refreshToken = get(req, 'headers.x-refresh');\r\n\r\n    const decoded = verifyJwt<{ session: string }>(refreshToken, 'refreshTokenPublicKey');\r\n\r\n    if (!decoded) {\r\n      throw new Error('Could not refresh access token');\r\n    }\r\n    const session = await findSessionById(decoded.session);\r\n\r\n    if (!session || !session.valid) {\r\n      throw new Error('Could not refresh access token');\r\n    }\r\n\r\n    const user = await this.models.User.findById(session.userId);\r\n\r\n    if (!user) {\r\n      return res.status(401).send('Could not refresh access token');\r\n    }\r\n\r\n    const accessToken = signAccessToken(user);\r\n\r\n    return { accessToken };\r\n  }\r\n}\r\n"]}