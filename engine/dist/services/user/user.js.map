{"version":3,"file":"user.js","sourceRoot":"/","sources":["services/user/user.ts"],"names":[],"mappings":";;;AAAA,+BAA0B;AAE1B,kEAAwD;AAExD,wEAA2C;AAC3C,kEAAkC;AAElC,MAAqB,WAAY,SAAQ,aAAQ;IAC/C,YAAY,OAAoB;QAC9B,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAEK,YAAY,CAAC,yBAAqC;;YACtD,IAAI;gBACF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,yBAAyB,CAAC,KAAK,EAAE,CAAC,CAAC;gBACtF,IAAI,KAAK,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;gBAEzD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,mBAAM,yBAAyB,EAAG,CAAC;gBACpE,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAElB,MAAM,IAAA,gBAAS,EAAC;oBACd,IAAI,EAAE,qBAAqB;oBAC3B,EAAE,EAAE,IAAI,CAAC,KAAK;oBACd,OAAO,EAAE,4BAA4B;oBACrC,IAAI,EAAE,uBAAuB,IAAI,CAAC,gBAAgB,UAAU,IAAI,CAAC,GAAG,EAAE;iBACvE,CAAC,CAAC;gBAEH,OAAO;oBACL,IAAI;iBACL,CAAC;aACH;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;QACH,CAAC;KAAA;IAEK,UAAU,CAAC,eAAuC;;YACtD,MAAM,EAAE,EAAE,EAAE,gBAAgB,EAAE,GAAG,eAAe,CAAC;YAEjD,sBAAsB;YACtB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAEjD,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;aACnC;YAED,4CAA4C;YAC5C,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC7C;YAED,2CAA2C;YAC3C,IAAI,IAAI,CAAC,gBAAgB,KAAK,gBAAgB,EAAE;gBAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAErB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAElB,OAAO,IAAI,CAAC;aACb;QACH,CAAC;KAAA;IAEK,cAAc,CAAC,mBAAsC;;YACzD,MAAM,EAAE,KAAK,EAAE,GAAG,mBAAmB,CAAC;YAEtC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YAEvD,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;aACnC;YAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;aACzC;YAED,MAAM,iBAAiB,GAAG,IAAA,SAAE,GAAE,CAAC;YAE/B,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;YAE3C,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAElB,MAAM,IAAA,gBAAS,EAAC;gBACd,EAAE,EAAE,IAAI,CAAC,KAAK;gBACd,IAAI,EAAE,kBAAkB;gBACxB,OAAO,EAAE,qBAAqB;gBAC9B,IAAI,EAAE,wBAAwB,iBAAiB,SAAS,IAAI,CAAC,GAAG,EAAE;aACnE,CAAC,CAAC;YAEH,aAAG,CAAC,KAAK,CAAC,+BAA+B,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;YAEvD,MAAM,OAAO,GAAG,0BAA0B,CAAC;YAC3C,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAEK,aAAa,CAAC,kBAA2C;;YAC7D,MAAM,EAAE,EAAE,EAAE,iBAAiB,EAAE,WAAW,EAAE,GAAG,kBAAkB,CAAC;YAElE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAEjD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,KAAK,iBAAiB,EAAE;gBACpF,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC7C;YAED,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAE9B,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;YAE5B,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAElB,MAAM,OAAO,GAAG,+BAA+B,CAAC;YAChD,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;CACF;AAvGD,8BAuGC","sourcesContent":["import { v4 } from 'uuid';\r\nimport { Config } from '../../config';\r\nimport IService, { IAppContext } from '../../types/app';\r\nimport { IUserAuth, IUserInput, IUserResetPasswordInput, IUserVerificationInput } from '../../types/user/user';\r\nimport sendEmail from '../../utils/mailer';\r\nimport log from '../../utils/log';\r\n\r\nexport default class UserService extends IService {\r\n  constructor(context: IAppContext) {\r\n    super(context);\r\n  }\r\n\r\n  async registerUser(CreateUnverifiedUserInput: IUserInput): Promise<IUserAuth> {\r\n    try {\r\n      const _user = await this.models.User.find({ email: CreateUnverifiedUserInput.email });\r\n      if (_user.length) throw new Error('User already exists');\r\n\r\n      const user = new this.models.User({ ...CreateUnverifiedUserInput });\r\n      await user.save();\r\n\r\n      await sendEmail({\r\n        from: 'jwlarbi15@gmail.com',\r\n        to: user.email,\r\n        subject: 'Please verify your account',\r\n        text: `Verification code : ${user.verificationCode}. Id : ${user._id}`,\r\n      });\r\n\r\n      return {\r\n        user,\r\n      };\r\n    } catch (e) {\r\n      throw new Error('Error creating new user');\r\n    }\r\n  }\r\n\r\n  async verifyUser(VerifyUserInput: IUserVerificationInput) {\r\n    const { id, verificationCode } = VerifyUserInput;\r\n\r\n    // find the user by Id\r\n    const user = await this.models.User.findById(id);\r\n\r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n\r\n    // check to see if they are already verified\r\n    if (user.verified) {\r\n      throw new Error('User is already verified');\r\n    }\r\n\r\n    // check to see if verificationCode matches\r\n    if (user.verificationCode === verificationCode) {\r\n      user.verified = true;\r\n\r\n      await user.save();\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  async forgotPassword(ForgotPasswordInput: { email: string }) {\r\n    const { email } = ForgotPasswordInput;\r\n\r\n    const user = await this.models.User.findOne({ email });\r\n\r\n    if (!user) {\r\n      throw new Error('user not found');\r\n    }\r\n\r\n    if (!user.verified) {\r\n      throw new Error('user is not verified');\r\n    }\r\n\r\n    const passwordResetCode = v4();\r\n\r\n    user.passwordResetCode = passwordResetCode;\r\n\r\n    await user.save();\r\n\r\n    await sendEmail({\r\n      to: user.email,\r\n      from: 'test@example.com',\r\n      subject: 'Reset your password',\r\n      text: `Password reset code: ${passwordResetCode}. Id: ${user._id}`,\r\n    });\r\n\r\n    log.debug(`Password reset code sent to ${user.email}`);\r\n\r\n    const message = 'password reset code sent';\r\n    return message;\r\n  }\r\n\r\n  async resetPassword(ResetPasswordInput: IUserResetPasswordInput) {\r\n    const { id, passwordResetCode, newPassword } = ResetPasswordInput;\r\n\r\n    const user = await this.models.User.findById(id);\r\n\r\n    if (!user || !user.passwordResetCode || user.passwordResetCode !== passwordResetCode) {\r\n      throw new Error('Could not reset password');\r\n    }\r\n\r\n    user.passwordResetCode = null;\r\n\r\n    user.password = newPassword;\r\n\r\n    await user.save();\r\n\r\n    const message = 'Successfully updated password';\r\n    return message;\r\n  }\r\n}\r\n"]}